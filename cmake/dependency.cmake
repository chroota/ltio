find_package(Tcmalloc REQUIRED)
list(APPEND LtIO_LINKER_LIBS PUBLIC ${Tcmalloc_LIBRARY})

## ---[ Google-gflags
include("cmake/External/glog_gflags.cmake")
list(APPEND LtIO_LINKER_LIBS PUBLIC glog::glog)
list(APPEND LtIO_LINKER_LIBS PUBLIC gflags::gflags)
list(APPEND LtIO_INCLUDE_DIRS PUBLIC ${GLOG_INCLUDE_DIRS})
list(APPEND LtIO_INCLUDE_DIRS PUBLIC ${GFLAGS_INCLUDE_DIRS})
list(APPEND LtIO_INCLUDE_DIRS
  PUBLIC
  $<TARGET_PROPERTY:fcontext,INTERFACE_INCLUDE_DIRECTORIES>
  )

find_package(Unwind REQUIRED)
list(APPEND LtIO_LINKER_LIBS PUBLIC ${LIBUNWIND_LIBRARIES})

find_package(ZLIB REQUIRED)
list(APPEND LtIO_LINKER_LIBS PUBLIC ${ZLIB_LIBRARIES})

# ---[ Threads
find_package(Threads REQUIRED)
list(APPEND LtIO_LINKER_LIBS PRIVATE ${CMAKE_THREAD_LIBS_INIT})

#find_package(PROFILER REQUIRED)
#list(APPEND LtIO_LINKER_LIBS PUBLIC ${PROFILER_LIBRARIES})

if (LTIO_WITH_OPENSSL)
  find_package(OpenSSL REQUIRED)
  #include_directories(${OPENSSL_INCLUDE_DIR})
  list(APPEND LtIO_LINKER_LIBS PUBLIC ${OPENSSL_LIBRARIES})
  list(APPEND LtIO_INCLUDE_DIRS PUBLIC ${OPENSSL_INCLUDE_DIR})
endif()

list(REMOVE_DUPLICATES LtIO_INCLUDE_DIRS)

# ---[ ccache
find_program(CCACHE_FOUND ccache)
if(CCACHE_FOUND)
  set_property(GLOBAL PROPERTY RULE_LAUNCH_LINK ccache)
  set_property(GLOBAL PROPERTY RULE_LAUNCH_COMPILE ccache)
endif(CCACHE_FOUND)

